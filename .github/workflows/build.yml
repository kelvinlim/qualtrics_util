name: Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
            python-version: '3.11'
          - os: macos-latest
            platform: macos-amd64
            python-version: '3.11'
          - os: macos-latest
            platform: macos-arm64
            python-version: '3.11'
          - os: windows-latest
            platform: windows-amd64
            python-version: '3.11'

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller qualtrics-util.spec
        
    - name: Rename executable
      shell: bash
      run: |
        cd dist
        if [ -f "qualtrics-util" ]; then
          if [ "${{ matrix.platform }}" = "windows-amd64" ]; then
            mv qualtrics-util qualtrics-util-windows-amd64.exe
          elif [ "${{ matrix.platform }}" = "macos-arm64" ]; then
            mv qualtrics-util qualtrics-util-macos-arm64
          elif [ "${{ matrix.platform }}" = "macos-amd64" ]; then
            mv qualtrics-util qualtrics-util-macos-amd64
          else
            mv qualtrics-util qualtrics-util-linux-amd64
          fi
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: qualtrics-util-${{ matrix.platform }}
        path: dist/qualtrics-util*
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy all executables to release-assets
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            cp "$dir"/* release-assets/ 2>/dev/null || true
          fi
        done
        
        # Create checksums for all files
        cd release-assets
        for file in *; do
          if [[ ! "$file" =~ \.sha256$ ]]; then
            sha256sum "$file" > "$file.sha256"
          fi
        done
        cd ..
        
        # List what we have
        echo "Release assets prepared:"
        ls -lh release-assets/

    - name: Get release notes
      id: release_notes
      run: |
        TAG_NAME="${{ github.ref_name }}"
        VERSION="${TAG_NAME#v}"
        
        # Read the template and substitute version
        sed "s/{version}/$VERSION/g" .github/release_template.md > release-notes.md
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body_path: release-notes.md
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
